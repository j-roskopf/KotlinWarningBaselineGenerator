/**
 * MIT License
 *
 * Copyright (c) 2024 Joe Roskopf
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.joetr.kotlin.warning.baseline.generator.collector

import org.gradle.api.logging.LogLevel
import org.gradle.internal.operations.BuildOperationDescriptor
import org.gradle.internal.operations.BuildOperationListener
import org.gradle.internal.operations.OperationFinishEvent
import org.gradle.internal.operations.OperationIdentifier
import org.gradle.internal.operations.OperationProgressEvent
import org.gradle.internal.operations.OperationStartEvent
import org.gradle.internal.operations.logging.LogEventBuildOperationProgressDetails
import java.io.File
import java.util.concurrent.ConcurrentHashMap

internal class WarningFileCollector {
    internal val kotlinWarningsMap = ConcurrentHashMap<String, Set<String>>()

    lateinit var projectName: String

    var fileToWriteTo: File? = null

    internal val buildOperationListener =
        object : BuildOperationListener {

            override fun started(
                buildOperation: BuildOperationDescriptor,
                startEvent: OperationStartEvent,
            ) {}

            override fun progress(
                operationIdentifier: OperationIdentifier,
                progressEvent: OperationProgressEvent,
            ) {
                val log = progressEvent.details
                if (log is LogEventBuildOperationProgressDetails) {
                    if (log.level.name == LogLevel.WARN.name) {
                        println("joerDebug - detected warn log $log")

                        if (log.message.contains("w:") && log.message.contains(".kt")) {
                            if (log.message.contains("/$projectName/")) {
                                println("joerDebug - adding log to $projectName")
                                kotlinWarningsMap[projectName] =
                                    kotlinWarningsMap.getOrDefault(projectName, emptySet()) + setOf(log.message)
                            }
                        }
                    }
                }
            }

            override fun finished(
                buildOperation: BuildOperationDescriptor,
                finishEvent: OperationFinishEvent,
            ) {}
        }

    fun writeWarningsToFile(
        content: Set<String>,
        file: File?,
    ) {
        file?.let {
            if (content.isNotEmpty()) {
                val text =
                    content.sorted().joinToString(
                        prefix =
                        """
                        # This file was automatically generated by the Kotlin Warning Baseline Generator Plugin
                        # and should not be edited manually.
                        

                      """
                            .trimIndent(),
                        separator = "\n",
                        postfix = "\n",
                    )

                it.writeText(text)
            }
        }
    }
}
